variable
	Data type
	variable name
	value
	declaration ( mandatory before using )
	initialization - assign a value to a declared variable for the first time
	Use a variable only if it has a value.
		printing
		assigning
	equal sign rules... assignment operator
		RHS of equal sign should match the data type
		LHS of equal sign should always be a variable
		If RHS is another variable.. then value of that varible gets assigned
			to the LHS varible
		If RHS is another variable.. RHS & LHS data type should match
		
		int a = 20; // a=20
		a=10; // a=10
		int b = 30; // b is 30
		b=40; // b is 40
		b=a; // a is 10.. value of RHS var a .. is reassig to b
		System.out.println(a);
		System.out.println(b);
		
		
		int c=10; 
		int d=10;
		boolean e=true;
		d=c; // NO errors
		d=e; // errors
		
		
		Primitve variable - can have literal values
		Object variables - can have reference value (new <class_name>)
			String can have both




Methods :
	Ouput : CAN ALWAYS BE 0 or 1
		0 = void  ... 
			public  void hello(String message)
		1 = appropriate data type, int/boolean... 
			public int add(int a, int b)
		more than 1 = complex or multiple infor to return, create an object data type 
			public Profile display(String userid)
	Input : CAN ALWAYS BE 0 or MORE
		0 = if no input require, leave it empty
			public int bye(  )
		More = if more than 1 input , separated by comma. data type followed by the name 
			public int add(int number1, int number2)

	NAMES : allowed alphabet, digits and $ _
		can start with alphabet $  _

	METHOD declaration - declares output, input and name of the operation
	METHOD definition - place with curly bracket to provide logic 


	return statement
		if void - no return required
		if anything but void - return required
			primitive data type - 
				literal value that matches output data type 
					or 
				variable that matches output data type 
			Object data type
				variable that matches output data type 
				
				
				
				
	
Relationship between 2 programs	(Reusability)	
IS-A - inheritnace
HAS-A - composition


Person 
Hand
Student
School

Person HAS-A Hand
public class Person{
	Hand h=new Hand();
}

Student IS-A Person
public class Student extends Person{

}


School HAS-A Student
public class School {
	Student s=new Student();
}



Actions / Methods / Does-A 

Input : enter the amount.... amountWithdraw... integer
Output : integer
Name : withdraw

declare method : 
public int withdraw(int amountWithdraw)
output	Name(input)


calculate simple interest
Name : simpleInterest
Input : amount , interestRate, term
Ouput : siResult

public outputtype name(inputtype intputname  )
public double 	simpleInterest(int amount, double interestRate, short term )

addition - 
Name : calculateSum
Input : 2 number
Ouput : 1 number
public int calculateSum( int number1, int number2  )

area of sqaure
Name :  squareArea
Input : number side
Ouput : number
public int squareArea( int side)

area of rectangle
Name : rectangleArea
Input : number length, number width
Ouput : number
public int rectangeArea( int length,int width)

area of circle
Name : circleArea
Input : number radius
Ouput : number
public int circleArea( int radius)

payment
Name : payment
Input : number charges, number creditCardNumber, number cvc, String xpiryDate
Output : succesfully/ failed boolean
public boolan payment( float charges, long creditCard,short cvc, String expDate)

Login
Name : loginAuth
Input :  String  usernname,String  password
Output : boolean

public boolean loginAuth(  String username, String password)


showProfile
Name : displayProfile
Input : String  usernname,String  password
Output :  name, address, phone, email,education




I will do this if .... = IF control flow
Either .... or ..... = IF ELSE control flow
Either ... or ..... or .... or ..... = IF ELSE IF control flow


For ( Initialization ; Condition ; Modification )
{
	Execution - code to be repeated
}

for ( int i=1 ; i < 4; i++){
	sysout("hi");
	if(i==2){
		continue; // skip next lines in current loop. continue with next loop
		break; // EXIT
	}
	sysout("bye");
}

I C E : i=1 , true,  print hi .. i==2 false... print bye
M C E : i=2 , true, print hi .. i==2 true BREAK - exit
M C E :  
M C E : 
M C E : 
M C E : 
M C E : 
M C E 

adding items to the cart =  fixed items, 0 or more items, 1 or more items

For  : Fixed number of loops - concert, airline
While : 0 or more  number (X) of loops - shopping
Do While :  1 or more number (X)  of loops - ATM

exit condition
ATM :
	
	
	
	while(condition check){
		sdfsdf
		sfdsdf
		sdfsdf
		dsf
	}
	
	
	
	do{
		sdfsdf
		sfdsdf
		sdfsdf
		dsf
	}while(condition check);
	
	int a=6;
	if(a==1 && a > 3) { 
		  System.out.println("a is 1");
	  }
	  else if ( a==2) { 
		  System.out.println("a is 2");
	  }
	  else if ( a==3) {
		  System.out.println("a is 3");
	  }else {
		  System.out.println("a is unknown");
	  }
	// jump
	switch (a){
		case 1:
			System.out.println("a is 1");
			break;
		case 2:
			System.out.println("a is 2");
			break;
		case 3:
			System.out.println("a is 3");
			break;
		default:
			System.out.println("a is unknown");
			break;
	}
	
	
	
	bank
		has-a : balance=100;
		
		does-a : 
			withdraw;
			deposit
	************** inheritnace *****
	int i=20;
	Iphone i = new IphoneX();
	
	
	1) "new" can be applied only on Complete class
	2) equal sign
		RHS should be same or CHILD of LHS
			Student s=new Student(); // RHS same
			Nissan n=new NissanZ(); // RHS child
	3) method call
		Nissan nis=new Nissan();
		test(nis);
		
		NissanZ nisZ=new NissanZ();
		test(nisZ); // method call u can pass any variable that is CHILD of method parameter data type
		
		public void test(ICar ic){
			ic.drive();
		}
	
	
	
	interface IIphone
	makecall();
	text();
	browse();
	screen();
	
class IPhone3 implements IIphone	
	makecall(){ smart phone call }
	text() { smart text }
	browse() { internet browsing }
	screen() { display screen }
	
class IPhone4 extends IPhone3
	appleMaps(){ geo service }

class Iphone5 extends Iphone4
	bioFingerScan() { finger print scan }
	
class IPhone6 extends Iphone5
	applePay() { asdasd }
	
class IphoneX extends Iphone6
	screen() { display bigger screen } Override parents implementation
	
	
	interface IIphone
	makecall();
	text();
	browse();
	screen();
	default installApp(){
			sfsdfsdfsdf
	}
	
	IIphone i=new IIphone(); // WRONG, new cannot be used for interface or abstract classes
abstract class IPhone3 implements IIphone	 // WRONG, if any methods not implemented declare class as abstract
	makecall(){ smart phone call }
	text() { smart text }
	browse() { internet browsing }
	// inherited 1 incomplete/abstract method..... screen 
	
class IPhone4 extends Iphone3
	appleMaps(){ geo service }
	screen(){ sdfsdfs }
	
	
class IPhone5 extends Iphone4
	biometricScan(){  sdfsd  }
class Iphone6 extends Iphone5
	facialRecog(){ sdfdsf }
		
	Iphone5 i4=new Iphone4(); // WRONG , RHS should be child of LHS
	IIphone i3=new Iphone3();// WRONG, RHS should be concrete/complete child of LHS
	Iphone3 i3=new Iphone5(); // GOOD
	Iphone4 i4=new Iphone6(); // WRONG, RHS not inheriting from above
	
	backward compatibility - Before java 1.8 
	
	typecasting
	
	
Interface ICar
	drive();
	default sing(){ classic }
	
class Nissan implements ICar
	drive(){ driving nissan }
	start(){ start nissan }
	playMusic(){ play }
	
class NissanZ extends Nissan
	drive(){ driving nissan faster}
	autoDrive() { autonomus driving }
	
ICar ic=new Nissan();	
ic.drive(); // no errors
ic.sing(); // no errors
((Nissan)ic).start(); // error	( ic has start and playmusic.. HIDDEN )
((NissanZ)ic).autoDrive(); 	
	
	
	Iphone5 
	
	
	Abstract classes - Generalization rule (common features)
adding new feauters, coding effort , modifying existing feature
INissanCar
	engine();
	start();
	stop();
	body();
	doors();
	airConditioner(); // adding new feature in interface ????
	
// Giant big engine (common parts ) manufacturing
abstract class NissanAbstract implements ICar
	engine() { adssad asdasdas } 
	start() { asdsad keyless start }
	stop() { asdsadasd }
	airconditner { hot cold } 
	// inherited body, door INCOMPLET/ABSTRACT methods

// assembly NissanE body, small factory
class NissanE extends NissanAbstract
	// inherited body, door, INCOMPLET/ABSTRACT methods
	body(){ moon roof }
	door(){ 4 doors }
	
class NissanSE extends NissanAbstract
	// inherited body, door,  INCOMPLET/ABSTRACT methods
	body(){ moon roof  and spoiler }
	door(){ 3 doors }
	
class NissanLimited extends NissanAbstract
	// inherited body, door,  INCOMPLET/ABSTRACT methods
	body(){ spoiler and panaromic roof }
	door(){ 2 doors }
	
	
	
	
	

INissanCar
	engine();
	start();
	stop();
	body();
	doors();
	airConditioner(); // adding new feature in interface ????
	
class NissanE implements INissan
	engine() { adssad} 
	start() { asdsad keyless start}
	stop() { asdsadasd }
	body(){ moon roof }
	door(){ 4 doors }
	airConditioner(){ cool hot } 
	
class NissanSE implements INissan
	engine() { adssad} 
	start() { asdsad keyless start}
	stop() { asdsadasd }
	body(){ moon roof  and spoiler }
	door(){ 3 doors }
	airConditioner(){ cool hot } 
	
class NissanLimited implements INissan
	engine() { adssad} 
	start() { asdsad keyless start }
	stop() { asdsadasd }
	body(){ spoiler and panaromic roof }
	door(){ 2 doors }
	airConditioner(){ cool hot } 
	
	
	
	IPayment
	billingAddress();
	ShippingAddress();
	payment();
	collectemailid();
abstract class AbstractPayment implements IPayment
	billingAddress(){} 
	ShippingAddress(){  enter street , enter city, enter zip, enter county} 
	collectemailid(){ asdasdsa }
		
class CreditCard extends AbstractPayment
	payment(){ adssadas }
class DebitCard extends AbstractPayment
	payment(){ 16 digit number, 3 sec code}
class Paypal extends AbstractPayment
	payment(){ paypal userid  , paypal password }


************** access privilege *************

www.amazon.com
packages
package com.amazon.www.login;
	Login.java
	registeration.java
com.amazon.www.browse
	shopping.java
	cart.java
com.amazon.www.payment	
	credit.java
	paypal.java
com.amazon.www.orderManagement	
	order.java
	


2 program 
is-a : inheritance.... extends, implements
has-a : composition... create reference

ParentPack1 = ChildPack1 ( is-a .. same package)
			public,protected,package
ParentPack1 = OtherPack1 ( has-a .. same package)
			public,protected,package
ParentPack1 = ChildPack2 ( is-a .. different package)
			public,protected
ParentPack1 = OtherPack2 ( has-a .. different package)
			public
		
class memebers - variable, methods, constructors		
public > protected > package > private

*************** polymorphism ******
runtime polymorphism : Overriding (Child overrides parent solution)
	redeclare parent method in child class
	method signature is SAME
	occurs between child and parent
compile-time polymorphism : Overloading 
	redeclaring method with different parameters/input
	method signature is DIFFERENT
	occurs in same program or between child/parent
	
Many forms : same functionality achiveed in many ways

*************** final ***************

variable : cannot change value
	constant unchangeable information... like ssn,dna,genes
method : 	cannot runtime POLYMORPHISM (overriding)
	Perfect method... never wish to change.
class : cannot INHERIT
	All methods are PERFECT.... 

*************** static ***************




